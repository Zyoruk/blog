---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Footer from "../../components/Footer.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import Header from "../../components/Header.astro";

const posts = (await getCollection("blog")).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Extract unique tags for filtering
const allTags = [...new Set(posts.flatMap((post) => post.data.tags || []))];
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title="Blog | Software Engineering & Tech Leadership" description="Insights on software engineering, AI-assisted development, and building systems at scale" />
		<!-- Optimized: Fonts already loaded in BaseHead -->
	</head>
	<body>
		<Header />
		
		<main>
			<!-- Hero Section -->
			<section class="hero-section">
				<div class="container">
					<div class="hero-content">
						<h1 class="hero-title">Blog</h1>
						<p class="hero-subtitle">Insights on software engineering, AI-assisted development, and building systems at scale.</p>
					</div>
				</div>
			</section>



			<!-- Filter Section -->
			{allTags.length > 0 && (
				<section class="filter-section">
					<div class="container">
						<div class="filter-controls">
							<button class="filter-btn active" data-filter="all">All</button>
							{allTags.map(tag => (
								<button class="filter-btn" data-filter={tag}>
									{tag.charAt(0).toUpperCase() + tag.slice(1)}
								</button>
							))}
						</div>
					</div>
				</section>
			)}

			<!-- Posts Grid -->
			<section class="posts-section">
				<div class="container">
					<div class="posts-grid">
						{posts.map((post) => (
							<article class="post-card" data-tags={post.data.tags?.join(' ') || ''}>
								<a href={`/blog/${post.id}/`} class="card-link">
									{post.data.heroImage && (
										<div class="card-image">
											<Image
												src={post.data.heroImage}
												alt={post.data.title}
												width={400}
												height={240}
												quality={80}
											/>
										</div>
									)}
									<div class="card-content">
										<div class="card-meta">
											<time class="card-date">
												<FormattedDate date={post.data.pubDate} />
											</time>
											{post.data.tags && post.data.tags.length > 0 && (
												<div class="card-tags">
													{post.data.tags.slice(0, 2).map(tag => (
														<span class="tag">{tag}</span>
													))}
												</div>
											)}
										</div>
										<h3 class="card-title">{post.data.title}</h3>
										{post.data.description && (
											<p class="card-description">{post.data.description}</p>
										)}
									</div>
								</a>
							</article>
						))}
					</div>
				</div>
			</section>
		</main>

		<Footer />
	</body>
</html>

<style>
	/* Hero Section */
	.hero-section {
		background: linear-gradient(135deg, var(--md-sys-color-primary-container) 0%, var(--md-sys-color-surface-container) 100%);
		padding: var(--space-2xl) 0;
		border-bottom: 1px solid var(--md-sys-color-outline-variant);
	}

	.hero-content {
		text-align: center;
		max-width: 600px;
		margin: 0 auto;
	}

	.hero-title {
		font-size: clamp(3rem, 6vw, 5rem);
		font-weight: 300;
		color: var(--md-sys-color-on-surface);
		margin-bottom: var(--space-md);
		letter-spacing: -0.02em;
	}

	.hero-subtitle {
		font-size: 1.25rem;
		color: var(--md-sys-color-on-surface-variant);
		font-weight: 300;
		line-height: 1.6;
		margin: 0;
	}

	/* Section Titles */
	.section-title {
		display: flex;
		align-items: center;
		gap: var(--space-md);
		margin-bottom: var(--space-xl);
		font-size: 2rem;
		font-weight: 400;
		color: var(--md-sys-color-on-surface);
	}

	.title-accent {
		width: 3rem;
		height: 2px;
		background: linear-gradient(90deg, var(--md-sys-color-primary), var(--moon-color-sage));
		border-radius: 1px;
	}



	/* Filter Section */
	.filter-section {
		padding: var(--space-lg) 0 var(--space-md) 0;
		background: var(--md-sys-color-surface);
	}

	.filter-controls {
		display: flex;
		gap: var(--space-xs);
		flex-wrap: wrap;
	}

	.filter-btn {
		padding: var(--space-sm) var(--space-lg);
		border: none;
		background: transparent;
		color: var(--md-sys-color-on-surface-variant);
		font-size: 0.875rem;
		font-weight: 400;
		cursor: pointer;
		transition: all 0.2s ease;
		border-radius: var(--md-sys-shape-corner-small);
		position: relative;
	}

	.filter-btn::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 50%;
		transform: translateX(-50%);
		width: 0;
		height: 2px;
		background: var(--md-sys-color-primary);
		transition: width 0.2s ease;
	}

	.filter-btn:hover {
		color: var(--md-sys-color-on-surface);
		background: var(--md-sys-color-surface-container);
	}

	.filter-btn.active {
		color: var(--md-sys-color-primary);
		font-weight: 500;
	}

	.filter-btn.active::after {
		width: 100%;
	}

	/* Posts Section */
	.posts-section {
		padding: var(--space-xl) 0 var(--space-2xl) 0;
	}

	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
		gap: var(--space-xl);
	}

	.post-card {
		background: var(--md-sys-color-surface);
		border-radius: var(--md-sys-shape-corner-large);
		overflow: hidden;
		box-shadow: var(--md-sys-elevation-level1);
		border: 1px solid var(--md-sys-color-outline-variant);
		transition: all 0.3s ease;
	}

	.post-card:hover {
		box-shadow: var(--md-sys-elevation-level2);
		transform: translateY(-2px);
		border-color: var(--md-sys-color-outline);
	}

	.card-link {
		display: block;
		text-decoration: none;
		color: inherit;
		height: 100%;
	}

	.card-image {
		aspect-ratio: 5/3;
		overflow: hidden;
	}

	.card-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.post-card:hover .card-image img {
		transform: scale(1.05);
	}

	.card-content {
		padding: var(--space-lg);
	}

	.card-meta {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin-bottom: var(--space-md);
		gap: var(--space-sm);
	}

	.card-date {
		font-size: 0.75rem;
		color: var(--md-sys-color-on-surface-variant);
		text-transform: uppercase;
		letter-spacing: 0.1em;
		font-weight: 500;
	}

	.card-tags {
		display: flex;
		gap: var(--space-xs);
	}

	.tag {
		background: var(--md-sys-color-secondary-container);
		color: var(--md-sys-color-on-secondary-container);
		padding: 0.25rem 0.5rem;
		border-radius: var(--md-sys-shape-corner-small);
		font-size: 0.625rem;
		text-transform: uppercase;
		letter-spacing: 0.1em;
		font-weight: 500;
	}

	.card-title {
		font-size: 1.25rem;
		font-weight: 500;
		color: var(--md-sys-color-on-surface);
		margin-bottom: var(--space-sm);
		line-height: 1.3;
	}

	.card-description {
		font-size: 0.875rem;
		color: var(--md-sys-color-on-surface-variant);
		line-height: 1.5;
		margin: 0;
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	/* Hidden class for filtering */
	.post-card.hidden {
		display: none;
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.hero-section {
			padding: var(--space-xl) 0;
		}

		.posts-section {
			padding: var(--space-xl) 0;
		}

		.posts-grid {
			grid-template-columns: 1fr;
			gap: var(--space-lg);
		}

		.filter-controls {
			overflow-x: auto;
			scrollbar-width: none;
			-ms-overflow-style: none;
			-webkit-overflow-scrolling: touch;
		}

		.filter-controls::-webkit-scrollbar {
			display: none;
		}

		.filter-btn {
			flex-shrink: 0;
			font-size: 0.8rem;
			padding: var(--space-xs) var(--space-md);
		}
	}
</style>

<script>
	// Filter functionality
	document.addEventListener('DOMContentLoaded', () => {
		const filterBtns = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLElement>;
		const postCards = document.querySelectorAll('.post-card') as NodeListOf<HTMLElement>;

		filterBtns.forEach(btn => {
			btn.addEventListener('click', () => {
				// Remove active class from all buttons
				filterBtns.forEach(b => b.classList.remove('active'));
				// Add active class to clicked button
				btn.classList.add('active');

				const filter = btn.dataset.filter;

				postCards.forEach(card => {
					if (filter === 'all') {
						card.classList.remove('hidden');
					} else {
						const cardTags = card.dataset.tags || '';
						if (filter && cardTags.includes(filter)) {
							card.classList.remove('hidden');
						} else {
							card.classList.add('hidden');
						}
					}
				});
			});
		});
	});
</script>
